// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sibe.API.Data;

#nullable disable

namespace Sibe.API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231006072709_Modulo1y2")]
    partial class Modulo1y2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Sibe.API.Models.Comprobantes.Boleta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AsistenteCarne")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AsistenteCarne");

                    b.ToTable("Boleta");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Boleta");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Sibe.API.Models.Comprobantes.BoletaComponente", b =>
                {
                    b.Property<int>("BoletaId")
                        .HasColumnType("int");

                    b.Property<int>("ComponenteId")
                        .HasColumnType("int");

                    b.Property<int>("CantidadPrestada")
                        .HasColumnType("int");

                    b.HasKey("BoletaId", "ComponenteId");

                    b.HasIndex("ComponenteId");

                    b.ToTable("BoletaComponente");
                });

            modelBuilder.Entity("Sibe.API.Models.Comprobantes.BoletaEquipo", b =>
                {
                    b.Property<int>("BoletaId")
                        .HasColumnType("int");

                    b.Property<int>("EquipoId")
                        .HasColumnType("int");

                    b.HasKey("BoletaId", "EquipoId");

                    b.HasIndex("EquipoId");

                    b.ToTable("BoletaEquipo");
                });

            modelBuilder.Entity("Sibe.API.Models.Entidades.Departamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Departamento");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "ESCUELA DE ELETRONICA"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "ESCUELA DE MECATRONICA"
                        },
                        new
                        {
                            Id = 3,
                            Nombre = "ESCUELA DE COMPUTADORES"
                        });
                });

            modelBuilder.Entity("Sibe.API.Models.Entidades.Profesor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("DepartamentoId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PrimerApellido")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SegundoApellido")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("DepartamentoId");

                    b.ToTable("Profesor");
                });

            modelBuilder.Entity("Sibe.API.Models.Entidades.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("Rol");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descripcion = "Administra usuarios y gestiona información sensible.",
                            Nombre = "ADMINISTRADOR"
                        },
                        new
                        {
                            Id = 2,
                            Descripcion = "Desarrollo y mantenimiento del sistema.",
                            Nombre = "DESARROLLADOR"
                        },
                        new
                        {
                            Id = 3,
                            Descripcion = "Asistencia y tareas administrativas.",
                            Nombre = "ASISTENTE"
                        });
                });

            modelBuilder.Entity("Sibe.API.Models.Entidades.Usuario", b =>
                {
                    b.Property<string>("Carne")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<byte[]>("ClaveHash")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<byte[]>("ClaveSalt")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.HasKey("Carne");

                    b.HasIndex("RolId");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("Sibe.API.Models.Historicos.HistoricoComponente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CantidadDisponible")
                        .HasColumnType("int");

                    b.Property<int>("CantidadModificada")
                        .HasColumnType("int");

                    b.Property<int>("ComponenteId")
                        .HasColumnType("int");

                    b.Property<int?>("ComprobanteId")
                        .HasColumnType("int");

                    b.Property<string>("Detalle")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ComponenteId");

                    b.HasIndex("ComprobanteId");

                    b.ToTable("HistoricoComponente");
                });

            modelBuilder.Entity("Sibe.API.Models.Historicos.HistoricoEquipo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ComprobanteId")
                        .HasColumnType("int");

                    b.Property<string>("Detalle")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("EquipoId")
                        .HasColumnType("int");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ComprobanteId");

                    b.HasIndex("EquipoId");

                    b.HasIndex("EstadoId");

                    b.ToTable("HistoricoEquipo");
                });

            modelBuilder.Entity("Sibe.API.Models.Inventario.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("Categoria");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "TTL",
                            Tipo = 2
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "OPERACIONALES",
                            Tipo = 2
                        },
                        new
                        {
                            Id = 3,
                            Nombre = "RESISTENCIAS",
                            Tipo = 2
                        },
                        new
                        {
                            Id = 4,
                            Nombre = "POTENCIOMETROS",
                            Tipo = 2
                        },
                        new
                        {
                            Id = 5,
                            Nombre = "CAPACITORES",
                            Tipo = 2
                        },
                        new
                        {
                            Id = 6,
                            Nombre = "PRECISION",
                            Tipo = 2
                        },
                        new
                        {
                            Id = 7,
                            Nombre = "CRISTALES",
                            Tipo = 2
                        },
                        new
                        {
                            Id = 8,
                            Nombre = "CMOS",
                            Tipo = 2
                        },
                        new
                        {
                            Id = 9,
                            Nombre = "BASES",
                            Tipo = 2
                        },
                        new
                        {
                            Id = 10,
                            Nombre = "TECLADO HEXADECIMAL",
                            Tipo = 2
                        },
                        new
                        {
                            Id = 11,
                            Nombre = "LCD",
                            Tipo = 2
                        },
                        new
                        {
                            Id = 12,
                            Nombre = "OSCILOSCOPIO MINI",
                            Tipo = 2
                        },
                        new
                        {
                            Id = 13,
                            Nombre = "CABLE WIRE WRAP",
                            Tipo = 2
                        },
                        new
                        {
                            Id = 14,
                            Nombre = "PUERTO SERIAL",
                            Tipo = 2
                        },
                        new
                        {
                            Id = 15,
                            Nombre = "DISIPADOR",
                            Tipo = 2
                        },
                        new
                        {
                            Id = 16,
                            Nombre = "SENSORES",
                            Tipo = 2
                        },
                        new
                        {
                            Id = 17,
                            Nombre = "TRANSISTORES/DIODOS",
                            Tipo = 2
                        },
                        new
                        {
                            Id = 18,
                            Nombre = "ADC/DAC",
                            Tipo = 2
                        },
                        new
                        {
                            Id = 19,
                            Nombre = "MULTIMETRO",
                            Tipo = 1
                        },
                        new
                        {
                            Id = 20,
                            Nombre = "GENERADOR FUNCIONES",
                            Tipo = 1
                        },
                        new
                        {
                            Id = 21,
                            Nombre = "FUENTE",
                            Tipo = 1
                        },
                        new
                        {
                            Id = 22,
                            Nombre = "MONITOR",
                            Tipo = 1
                        });
                });

            modelBuilder.Entity("Sibe.API.Models.Inventario.Componente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ActivoBodega")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ActivoTec")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ActivoBodega")
                        .IsUnique();

                    b.HasIndex("ActivoTec")
                        .IsUnique();

                    b.HasIndex("CategoriaId");

                    b.HasIndex("EstadoId");

                    b.ToTable("Componente");
                });

            modelBuilder.Entity("Sibe.API.Models.Inventario.Equipo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ActivoBodega")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ActivoTec")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Marca")
                        .HasColumnType("longtext");

                    b.Property<string>("Modelo")
                        .HasColumnType("longtext");

                    b.Property<string>("Observaciones")
                        .HasColumnType("longtext");

                    b.Property<string>("Serie")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ActivoBodega")
                        .IsUnique();

                    b.HasIndex("ActivoTec")
                        .IsUnique();

                    b.HasIndex("CategoriaId");

                    b.HasIndex("EstadoId");

                    b.ToTable("Equipo");
                });

            modelBuilder.Entity("Sibe.API.Models.Inventario.Estado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Estado");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descripcion = "El item está disponible en bodega y listo para ser prestado a los solicitantes.",
                            Nombre = "DISPONIBLE"
                        },
                        new
                        {
                            Id = 2,
                            Descripcion = "El item ha sido entregado a un solicitante y está a la espera de ser devuelto.",
                            Nombre = "PRESTADO"
                        },
                        new
                        {
                            Id = 3,
                            Descripcion = "No quedan componentes disponibles en bodega ya que todos han sido prestados.",
                            Nombre = "AGOTADO"
                        },
                        new
                        {
                            Id = 4,
                            Descripcion = "El item está dañado y no puede ser prestado en su estado actual.",
                            Nombre = "DAÑADO"
                        },
                        new
                        {
                            Id = 5,
                            Descripcion = "El item se encuentra en mantenimiento y reparación.",
                            Nombre = "EN REPARACION"
                        },
                        new
                        {
                            Id = 6,
                            Descripcion = "El item ha sido retirado de la bodega, donado o descontinuado su uso.",
                            Nombre = "RETIRADO"
                        },
                        new
                        {
                            Id = 7,
                            Descripcion = "Un funcionario ha apartado el item y está reservado para su préstamo futuro.",
                            Nombre = "APARTADO"
                        });
                });

            modelBuilder.Entity("Sibe.API.Models.Comprobantes.BoletaEstudiante", b =>
                {
                    b.HasBaseType("Sibe.API.Models.Comprobantes.Boleta");

                    b.Property<string>("Carne")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("ProfesorAutorizadorId")
                        .HasColumnType("int");

                    b.HasIndex("ProfesorAutorizadorId");

                    b.HasDiscriminator().HasValue("BoletaEstudiante");
                });

            modelBuilder.Entity("Sibe.API.Models.Comprobantes.BoletaProfesor", b =>
                {
                    b.HasBaseType("Sibe.API.Models.Comprobantes.Boleta");

                    b.Property<int>("ProfesorId")
                        .HasColumnType("int");

                    b.HasIndex("ProfesorId");

                    b.HasDiscriminator().HasValue("BoletaProfesor");
                });

            modelBuilder.Entity("Sibe.API.Models.Comprobantes.Boleta", b =>
                {
                    b.HasOne("Sibe.API.Models.Entidades.Usuario", "Asistente")
                        .WithMany()
                        .HasForeignKey("AsistenteCarne")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asistente");
                });

            modelBuilder.Entity("Sibe.API.Models.Comprobantes.BoletaComponente", b =>
                {
                    b.HasOne("Sibe.API.Models.Comprobantes.Boleta", "Boleta")
                        .WithMany("BoletaComponentes")
                        .HasForeignKey("BoletaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sibe.API.Models.Inventario.Componente", "Componente")
                        .WithMany("BoletasComponente")
                        .HasForeignKey("ComponenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Boleta");

                    b.Navigation("Componente");
                });

            modelBuilder.Entity("Sibe.API.Models.Comprobantes.BoletaEquipo", b =>
                {
                    b.HasOne("Sibe.API.Models.Comprobantes.Boleta", "Boleta")
                        .WithMany("BoletaEquipo")
                        .HasForeignKey("BoletaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sibe.API.Models.Inventario.Equipo", "Equipo")
                        .WithMany("BoletasEquipo")
                        .HasForeignKey("EquipoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Boleta");

                    b.Navigation("Equipo");
                });

            modelBuilder.Entity("Sibe.API.Models.Entidades.Profesor", b =>
                {
                    b.HasOne("Sibe.API.Models.Entidades.Departamento", "Departamento")
                        .WithMany()
                        .HasForeignKey("DepartamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departamento");
                });

            modelBuilder.Entity("Sibe.API.Models.Entidades.Usuario", b =>
                {
                    b.HasOne("Sibe.API.Models.Entidades.Rol", "Rol")
                        .WithMany()
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("Sibe.API.Models.Historicos.HistoricoComponente", b =>
                {
                    b.HasOne("Sibe.API.Models.Inventario.Componente", "Componente")
                        .WithMany("HistoricoComponente")
                        .HasForeignKey("ComponenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sibe.API.Models.Comprobantes.Boleta", "Comprobante")
                        .WithMany()
                        .HasForeignKey("ComprobanteId");

                    b.Navigation("Componente");

                    b.Navigation("Comprobante");
                });

            modelBuilder.Entity("Sibe.API.Models.Historicos.HistoricoEquipo", b =>
                {
                    b.HasOne("Sibe.API.Models.Comprobantes.Boleta", "Comprobante")
                        .WithMany()
                        .HasForeignKey("ComprobanteId");

                    b.HasOne("Sibe.API.Models.Inventario.Equipo", "Equipo")
                        .WithMany("HistoricoEquipo")
                        .HasForeignKey("EquipoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sibe.API.Models.Inventario.Estado", "Estado")
                        .WithMany()
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comprobante");

                    b.Navigation("Equipo");

                    b.Navigation("Estado");
                });

            modelBuilder.Entity("Sibe.API.Models.Inventario.Componente", b =>
                {
                    b.HasOne("Sibe.API.Models.Inventario.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sibe.API.Models.Inventario.Estado", "Estado")
                        .WithMany()
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Estado");
                });

            modelBuilder.Entity("Sibe.API.Models.Inventario.Equipo", b =>
                {
                    b.HasOne("Sibe.API.Models.Inventario.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sibe.API.Models.Inventario.Estado", "Estado")
                        .WithMany()
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Estado");
                });

            modelBuilder.Entity("Sibe.API.Models.Comprobantes.BoletaEstudiante", b =>
                {
                    b.HasOne("Sibe.API.Models.Entidades.Profesor", "ProfesorAutorizador")
                        .WithMany()
                        .HasForeignKey("ProfesorAutorizadorId");

                    b.Navigation("ProfesorAutorizador");
                });

            modelBuilder.Entity("Sibe.API.Models.Comprobantes.BoletaProfesor", b =>
                {
                    b.HasOne("Sibe.API.Models.Entidades.Profesor", "Profesor")
                        .WithMany()
                        .HasForeignKey("ProfesorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profesor");
                });

            modelBuilder.Entity("Sibe.API.Models.Comprobantes.Boleta", b =>
                {
                    b.Navigation("BoletaComponentes");

                    b.Navigation("BoletaEquipo");
                });

            modelBuilder.Entity("Sibe.API.Models.Inventario.Componente", b =>
                {
                    b.Navigation("BoletasComponente");

                    b.Navigation("HistoricoComponente");
                });

            modelBuilder.Entity("Sibe.API.Models.Inventario.Equipo", b =>
                {
                    b.Navigation("BoletasEquipo");

                    b.Navigation("HistoricoEquipo");
                });
#pragma warning restore 612, 618
        }
    }
}
